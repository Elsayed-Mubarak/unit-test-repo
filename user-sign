const chai = require("chai");
const { expect } = chai;
require("mocha");
const request = require("supertest");

describe("User Signup", () => {
  let userData,
    userDataWithoutName,
    userDataWithoutEmail,
    userDataWithoutPassword,
    userDataWithInvalidPassword,
    userDataWithInvalidEmail,
    userDataWithInvalidName;

  beforeEach(() => {
    userDataWithoutName = {
      email: "sherif@mailsac.com",
      password: "@isec2020",
      country: "Egypt",
    };

    userDataWithoutEmail = {
      name: "Sherif",
      password: "@isec2020",
      country: "Egypt",
    };

    userDataWithoutPassword = {
      name: "Sherif",
      email: "sherif@mailsac.com",
      country: "Egypt",
    };

    userDataWithInvalidPassword = {
      name: "Sherif",
      email: "sherif@mailsac.com",
      password: "isec2020",
      country: "Egypt",
    };

    userDataWithInvalidEmail = {
      name: "Sherif",
      email: "sherif@mailsac",
      password: "@isec2020",
      country: "Egypt",
    };

    userDataWithInvalidName = {
      name: "ramy12",
      email: "ramy@mailsac.com",
      password: "@isec2020",
      country: "Egypt",
    };

    userData = {
      name: "Shady wahballa",
      email: "shady@mailsac.com",
      password: "@isec2020",
      country: "Egypt",
    };
  });

  describe("Signup Validation Schema", () => {
    it("name Required", () => {
      return request("localhost:3000/api")
        .post("/user/signup")
        .send(userDataWithoutName)
        .then((response) => {
          expect(response.status).to.equal(400);
          expect(response.body)
            .to.have.property("message")
            .to.equal("name is required");
        });
    });

    it("email Required", () => {
      return request("localhost:3000/api")
        .post("/user/signup")
        .send(userDataWithoutEmail)
        .then((response) => {
          expect(response.status).to.equal(400);
          expect(response.body)
            .to.have.property("message")
            .to.equal("email is required");
        });
    });

    it("Password Required", () => {
      return request("localhost:3000/api")
        .post("/user/signup")
        .send(userDataWithoutPassword)
        .then((response) => {
          expect(response.status).to.equal(400);
          expect(response.body)
            .to.have.property("message")
            .to.equal("password is required");
        });
    });

    it("Password Invalid", () => {
      return request("localhost:3000/api")
        .post("/user/signup")
        .send(userDataWithInvalidPassword)
        .then((response) => {
          expect(response.status).to.equal(400);
          expect(response.body)
            .to.have.property("message")
            .to.equal(
              "Password must be at least a minimum of 8 characters long with at least 1 number and 1 special character"
            );
        });
    });

    it("Email Invalid", () => {
      return request("localhost:3000/api")
        .post("/user/signup")
        .send(userDataWithInvalidEmail)
        .then((response) => {
          expect(response.status).to.equal(400);
          expect(response.body)
            .to.have.property("message")
            .to.equal("email must be a valid email");
        });
    });

    it("Name Invalid", () => {
      return request("localhost:3000/api")
        .post("/user/signup")
        .send(userDataWithInvalidName)
        .then((response) => {
          expect(response.status).to.equal(400);
          expect(response.body)
            .to.have.property("message")
            .to.equal(
              "Name length must be between 4:25 characters and consists of letters only"
            );
        });
    });
  });

  describe("User Data Valid", () => {
    it("Save User Data and Send token", () => {
      return request("localhost:3000/api")
        .post("/user/signup")
        .send(userData)
        .then((response) => {
          expect(response.status).to.equal(200);
          expect(response.body).to.have.property("token");
        });
    });
    it("User Already Exists", () => {
      return request("localhost:3000/api")
        .post("/user/signup")
        .send(userData)
        .then((response) => {
          expect(response.status).to.equal(409);
          expect(response.body)
            .to.have.property("message")
            .to.equal("Email already Registered Before");
        });
    });
  });
  
});
